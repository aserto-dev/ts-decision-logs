/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v2/decision_logs/decision_logs": {
    /** Returns a collection of decision logs. */
    get: operations["decision_logs.list_decision_logs"];
  };
  "/api/v2/decision_logs/decision_logs/{name}": {
    /** Returns the location of a single decison log instance. */
    get: operations["decision_logs.get_decision_log"];
  };
  "/api/v2/decision_logs/decisions/policy/{policy_name}/{instance_label}": {
    /** Returns a stream of decisions */
    get: operations["decision_logs.decisions"];
  };
  "/api/v2/decision_logs/query": {
    /** Returns a collection of raw decision logs strings matching the query specification. */
    post: operations["decision_logs.query"];
  };
  "/api/v2/decision_logs/users": {
    /** Returns a collection of users that may be referenced by decision logs. */
    get: operations["decision_logs.list_users"];
  };
  "/api/v2/decision_logs/users/{id}": {
    /** Returns the location of a single user that may be referenced by decision logs. */
    get: operations["decision_logs.get_user"];
  };
}

export interface components {
  schemas: {
    protobufAny: {
      type_url?: string;
      /** Format: byte */
      value?: string;
    };
    /**
     * @description `NullValue` is a singleton enumeration to represent the null value for the
     * `Value` type union.
     *
     *  The JSON representation for `NullValue` is JSON `null`.
     *
     *  - NULL_VALUE: Null value.
     * @default NULL_VALUE
     */
    protobufNullValue: "NULL_VALUE";
    rpcStatus: {
      /** Format: int32 */
      code?: number;
      details?: components["schemas"]["protobufAny"][];
      message?: string;
    };
    /** represents a decision that an authorizer performed in the past */
    v2Decision: {
      annotations?: { [key: string]: string };
      id?: string;
      outcomes?: { [key: string]: boolean };
      path?: string;
      policy?: components["schemas"]["v2DecisionPolicy"];
      resource?: { [key: string]: unknown };
      tenant_id?: string;
      /** Format: date-time */
      timestamp?: string;
      user?: components["schemas"]["v2DecisionUser"];
    };
    v2DecisionLog: {
      url?: string;
    };
    v2DecisionLogItem: {
      name?: string;
    };
    /** information about a policy used in a decision */
    v2DecisionPolicy: {
      context?: components["schemas"]["v2PolicyContext"];
      policy_instance?: components["schemas"]["v2PolicyInstance"];
      registry_digest?: string;
      registry_image?: string;
      registry_service?: string;
      registry_tag?: string;
    };
    /** information about a user on behalf of whom a decision was made */
    v2DecisionUser: {
      context?: components["schemas"]["v2IdentityContext"];
      email?: string;
      id?: string;
    };
    v2ExecuteQueryRequest: {
      instance_label?: string;
      page?: components["schemas"]["v2PaginationRequest"];
      policy_name?: string;
      /** Format: int64 */
      top_n?: string;
    };
    v2ExecuteQueryResponse: {
      page?: components["schemas"]["v2PaginationResponse"];
      results?: components["schemas"]["v2Result"][];
    };
    v2GetDecisionLogResponse: {
      log?: components["schemas"]["v2DecisionLog"];
    };
    v2GetDecisionsResponse: {
      decision?: components["schemas"]["v2Decision"];
    };
    v2GetUserResponse: {
      user?: components["schemas"]["v2User"];
    };
    v2IdentityContext: {
      identity?: string;
      type?: components["schemas"]["v2IdentityType"];
    };
    /**
     * @description Identity types, describes the payload type of the identity field inside the IdentityContext message.
     *
     *  - IDENTITY_TYPE_UNKNOWN: Unknown, value not set, requests will fail with identity type not set error.
     *  - IDENTITY_TYPE_NONE: None, no explicit identity context set, equals anonymous.
     *  - IDENTITY_TYPE_SUB: Sub(ject), identity field contains an oAUTH subject.
     *  - IDENTITY_TYPE_JWT: JWT, identity field contains a JWT access token.
     * @default IDENTITY_TYPE_UNKNOWN
     */
    v2IdentityType:
      | "IDENTITY_TYPE_UNKNOWN"
      | "IDENTITY_TYPE_NONE"
      | "IDENTITY_TYPE_SUB"
      | "IDENTITY_TYPE_JWT";
    v2ListDecisionLogsResponse: {
      page?: components["schemas"]["v2PaginationResponse"];
      results?: components["schemas"]["v2DecisionLogItem"][];
    };
    v2ListUsersResponse: {
      page?: components["schemas"]["v2PaginationResponse"];
      results?: components["schemas"]["v2UserItem"][];
    };
    v2PaginationRequest: {
      /** Format: int32 */
      size?: number;
      token?: string;
    };
    v2PaginationResponse: {
      next_token?: string;
      /** Format: int32 */
      result_size?: number;
      /** Format: int32 */
      total_size?: number;
    };
    v2PolicyContext: {
      decisions?: string[];
      path?: string;
    };
    v2PolicyInstance: {
      instance_label?: string;
      name?: string;
    };
    v2Result: {
      event?: components["schemas"]["v2Decision"];
      log?: string;
    };
    v2User: {
      url?: string;
    };
    v2UserItem: {
      id?: string;
      /** Format: date-time */
      updated_at?: string;
    };
  };
}

export interface operations {
  /** Returns a collection of decision logs. */
  "decision_logs.list_decision_logs": {
    parameters: {
      query: {
        "page.size"?: number;
        "page.token"?: string;
        policies?: string[];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2ListDecisionLogsResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the location of a single decison log instance. */
  "decision_logs.get_decision_log": {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2GetDecisionLogResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns a stream of decisions */
  "decision_logs.decisions": {
    parameters: {
      path: {
        policy_name: string;
        instance_label: string;
      };
      query: {
        since?: string;
      };
    };
    responses: {
      /** A successful response.(streaming responses) */
      200: {
        content: {
          "application/json": {
            error?: components["schemas"]["rpcStatus"];
            result?: components["schemas"]["v2GetDecisionsResponse"];
          };
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns a collection of raw decision logs strings matching the query specification. */
  "decision_logs.query": {
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2ExecuteQueryResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["v2ExecuteQueryRequest"];
      };
    };
  };
  /** Returns a collection of users that may be referenced by decision logs. */
  "decision_logs.list_users": {
    parameters: {
      query: {
        "page.size"?: number;
        "page.token"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2ListUsersResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
  /** Returns the location of a single user that may be referenced by decision logs. */
  "decision_logs.get_user": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        content: {
          "application/json": components["schemas"]["v2GetUserResponse"];
        };
      };
      /** An unexpected error response. */
      default: {
        content: {
          "application/json": components["schemas"]["rpcStatus"];
        };
      };
    };
  };
}

export interface external {}
